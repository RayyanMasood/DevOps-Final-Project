version: '3.8'

name: devops-dashboard

services:
  # PostgreSQL Database (Primary)
  postgres:
    image: postgres:16-alpine
    container_name: devops-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: devops_dashboard
      POSTGRES_USER: devops_user
      POSTGRES_PASSWORD: devops_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/postgres-init:/docker-entrypoint-initdb.d:ro
    networks:
      - devops-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devops_user -d devops_dashboard"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  # MySQL Database (Secondary)
  mysql:
    image: mysql:8.0
    container_name: devops-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: devops_dashboard
      MYSQL_USER: devops_user
      MYSQL_PASSWORD: devops_password
      MYSQL_CHARSET: utf8mb4
      MYSQL_COLLATION: utf8mb4_unicode_ci
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/mysql-init:/docker-entrypoint-initdb.d:ro
    networks:
      - devops-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "devops_user", "-pdevops_password"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --innodb-buffer-pool-size=256M
      --max-connections=200

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: devops-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./database/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - devops-network
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s

  # Backend API Service
  backend:
    build:
      context: ./backend
      target: development
      args:
        - NODE_VERSION=20-alpine
    container_name: devops-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://devops_user:devops_password@postgres:5432/devops_dashboard
      MYSQL_URL: mysql://devops_user:devops_password@mysql:3306/devops_dashboard
      REDIS_URL: redis://redis:6379
      JWT_SECRET: dev-jwt-secret-change-in-production
      JWT_EXPIRES_IN: 7d
      CORS_ORIGIN: http://localhost:3000
      LOG_LEVEL: debug
      ENABLE_REAL_TIME: true
      ENABLE_METRICS: true
      ENABLE_WEBSOCKET: true
    ports:
      - "3001:3001"
    volumes:
      - ./backend/src:/app/src:ro
      - ./backend/prisma:/app/prisma:ro
      - backend_node_modules:/app/node_modules
      - backend_logs:/app/logs
    networks:
      - devops-network
    depends_on:
      postgres:
        condition: service_healthy
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    develop:
      watch:
        - action: sync
          path: ./backend/src
          target: /app/src
        - action: rebuild
          path: ./backend/package.json

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      target: development
      args:
        - NODE_VERSION=20-alpine
    container_name: devops-frontend
    restart: unless-stopped
    environment:
      VITE_API_URL: http://backend:3001
      VITE_WEBSOCKET_URL: ws://backend:3001
      VITE_APP_NAME: DevOps Dashboard
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/src:/app/src:ro
      - ./frontend/public:/app/public:ro
      - frontend_node_modules:/app/node_modules
    networks:
      - devops-network
    depends_on:
      - backend
    stdin_open: true
    tty: true
    develop:
      watch:
        - action: sync
          path: ./frontend/src
          target: /app/src
        - action: rebuild
          path: ./frontend/package.json

  # Database Administration (Adminer)
  adminer:
    image: adminer:4.8.1-standalone
    container_name: devops-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: dracula
    networks:
      - devops-network
    depends_on:
      - postgres
      - mysql

  # Redis Commander (Redis GUI)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: devops-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
      HTTP_USER: admin
      HTTP_PASSWORD: admin
    ports:
      - "8081:8081"
    networks:
      - devops-network
    depends_on:
      - redis

volumes:
  postgres_data:
    driver: local
  mysql_data:
    driver: local
  redis_data:
    driver: local
  backend_node_modules:
    driver: local
  frontend_node_modules:
    driver: local
  backend_logs:
    driver: local

networks:
  devops-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 