version: '3.8'

# Production overrides for docker-compose.yml
# Usage: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

services:
  # Production PostgreSQL with optimizations
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: devops_dashboard
      POSTGRES_USER: devops_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    secrets:
      - postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
      - ./database/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    command: >
      postgres
      -c max_connections=300
      -c shared_buffers=512MB
      -c effective_cache_size=2GB
      -c maintenance_work_mem=128MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c max_worker_processes=8
      -c max_parallel_workers_per_gather=4
      -c max_parallel_workers=8
      -c max_parallel_maintenance_workers=4
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  # Production Redis with persistence and optimization
  redis:
    image: redis:7-alpine
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 300
      --timeout 0
      --save 900 1
      --save 300 10
      --save 60 10000
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Production Backend with optimizations
  backend:
    build:
      context: ./backend
      target: production
      args:
        - NODE_VERSION=20-alpine
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://devops_user:${POSTGRES_PASSWORD}@postgres:5432/devops_dashboard
      REDIS_URL: redis://redis:6379
      JWT_SECRET_FILE: /run/secrets/jwt_secret
      LOG_LEVEL: info
      ENABLE_REAL_TIME: true
      ENABLE_METRICS: true
      ENABLE_WEBSOCKET: true
      TRUST_PROXY: true
      HELMET_ENABLED: true
    secrets:
      - jwt_secret
    volumes:
      - backend_logs:/app/logs
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first

  # Production Frontend with Nginx
  frontend:
    build:
      context: ./frontend
      target: production
      args:
        - NODE_VERSION=20-alpine
    environment:
      VITE_API_URL: /api
      VITE_WEBSOCKET_URL: wss://your-domain.com
      VITE_APP_NAME: DevOps Dashboard
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # Nginx Load Balancer & Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: devops-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - devops-network
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Remove development tools in production
  adminer:
    deploy:
      replicas: 0

  redis-commander:
    deploy:
      replicas: 0

# Production secrets
secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt

# Additional production volumes
volumes:
  nginx_logs:
    driver: local 