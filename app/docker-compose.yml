services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: notes-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: notes_db
      MYSQL_USER: notes_user
      MYSQL_PASSWORD: notes_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - notes-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # PostgreSQL Database
  postgres:
    image: postgres:16
    container_name: notes-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: notes_db
      POSTGRES_USER: notes_user
      POSTGRES_PASSWORD: notes_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - notes-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U notes_user -d notes_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: notes-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_USER: notes_user
      MYSQL_PASSWORD: notes_password
      MYSQL_DATABASE: notes_db
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: notes_user
      POSTGRES_PASSWORD: notes_password
      POSTGRES_DATABASE: notes_db
    ports:
      - "3001:3001"
    depends_on:
      mysql:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - notes-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: notes-frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost/api
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - notes-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Load Balancer (nginx)
  loadbalancer:
    image: nginx:alpine
    container_name: notes-loadbalancer
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - frontend
      - backend
    networks:
      - notes-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mysql_data:
    driver: local
  postgres_data:
    driver: local

networks:
  notes-network:
    driver: bridge 